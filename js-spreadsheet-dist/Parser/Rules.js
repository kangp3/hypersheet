"use strict";
exports.__esModule = true;
// Rules represent the Regular Expressions that will be used in sequence to match a given input to the Parser.
var WHITE_SPACE_RULE = /^(?:\s+)/;
var DOUBLE_QUOTES_RULE = /^(?:"(\\["]|[^"])*")/;
var SINGLE_QUOTES_RULE = /^(?:'(\\[']|[^'])*')/;
var FORMULA_NAME_RULE = /^(?:[A-Za-z.]{1,}[A-Za-z_0-9]+(?=[(]))/;
var $_A1_CELL_RULE = /^(?:\$[A-Za-z]+\$[0-9]+)/;
var A1_CELL_RULE = /^(?:[A-Za-z]+[0-9]+)/;
var FORMULA_NAME_SIMPLE_RULE = /^(?:[A-Za-z.]+(?=[(]))/;
var VARIABLE_RULE = /^(?:[A-Za-z]{1,}[A-Za-z_0-9]+)/;
var SIMPLE_VARIABLE_RILE = /^(?:[A-Za-z_]+)/;
var INTEGER_RULE = /^(?:[0-9]+(?:(?:[eE])(?:[\+-])?[0-9]+)?)/;
var OPEN_AND_CLOSE_OF_ARRAY_RULE = /^(?:\[([^\]]*)?\])/;
var DOLLAR_SIGN_RULE = /^(?:\$)/;
var AMPERSAND_SIGN_RULE = /^(?:&)/;
var SINGLE_WHITESPACE_RULE = /^(?: )/;
var PERIOD_RULE = /^(?:[.])/;
var COLON_RULE = /^(?::)/;
var SEMI_COLON_RULE = /^(?:;)/;
var COMMA_RULE = /^(?:,)/;
var ASTERISK_RULE = /^(?:\*)/;
var FORWARD_SLASH_RULE = /^(?:\/)/;
var MINUS_SIGN_RULE = /^(?:-)/;
var PLUS_SIGN_RULE = /^(?:\+)/;
var CARET_SIGN_RULE = /^(?:\^)/;
var OPEN_PAREN_RULE = /^(?:\()/;
var CLOSE_PAREN_RULE = /^(?:\))/;
var GREATER_THAN_SIGN_RULE = /^(?:>)/;
var LESS_THAN_SIGN_RULE = /^(?:<)/;
var OPEN_DOUBLE_QUOTE = /^(?:")/;
var OPEN_SINGLE_QUITE = /^(?:')/;
var EXCLAMATION_POINT_RULE = /^(?:!)/;
var EQUALS_SIGN_RULE = /^(?:=)/;
var PERCENT_SIGN_RULE = /^(?:%)/;
var FULL_ERROR_RULE = /^(?:#N\/A|#NUM\!|#NULL\!|#DIV\/0\!|#VALUE\!|#REF\!|#ERROR)/;
var END_OF_STRING_RULE = /^(?:$)/;
// Sequential rules to use when parsing a given input.
var RULES = [];
exports.RULES = RULES;
RULES[0 /* WhiteSpace */] = WHITE_SPACE_RULE;
RULES[1 /* DoubleQuotes */] = DOUBLE_QUOTES_RULE;
RULES[2 /* SingleQuotes */] = SINGLE_QUOTES_RULE;
RULES[3 /* FormulaName */] = FORMULA_NAME_RULE;
RULES[6 /* $A1Cell */] = $_A1_CELL_RULE;
RULES[7 /* A1Cell */] = A1_CELL_RULE;
RULES[8 /* FormulaNameSimple */] = FORMULA_NAME_SIMPLE_RULE;
RULES[9 /* Variable */] = VARIABLE_RULE;
RULES[10 /* SimpleVariable */] = SIMPLE_VARIABLE_RILE;
RULES[11 /* Integer */] = INTEGER_RULE;
RULES[12 /* SelfContainedArray */] = OPEN_AND_CLOSE_OF_ARRAY_RULE;
RULES[13 /* DollarSign */] = DOLLAR_SIGN_RULE;
RULES[14 /* Ampersand */] = AMPERSAND_SIGN_RULE;
RULES[15 /* SingleWhitespace */] = SINGLE_WHITESPACE_RULE;
RULES[16 /* Period */] = PERIOD_RULE;
RULES[17 /* Colon */] = COLON_RULE;
RULES[18 /* Semicolon */] = SEMI_COLON_RULE;
RULES[19 /* Comma */] = COMMA_RULE;
RULES[20 /* Asterisk */] = ASTERISK_RULE;
RULES[21 /* ForwardSlash */] = FORWARD_SLASH_RULE;
RULES[22 /* Minus */] = MINUS_SIGN_RULE;
RULES[23 /* Plus */] = PLUS_SIGN_RULE;
RULES[24 /* Caret */] = CARET_SIGN_RULE;
RULES[25 /* OpenParen */] = OPEN_PAREN_RULE;
RULES[26 /* CloseParen */] = CLOSE_PAREN_RULE;
RULES[27 /* GreaterThan */] = GREATER_THAN_SIGN_RULE;
RULES[28 /* LessThanSign */] = LESS_THAN_SIGN_RULE;
RULES[30 /* OpenDoubleQuote */] = OPEN_DOUBLE_QUOTE;
RULES[31 /* OpenSingleQuote */] = OPEN_SINGLE_QUITE;
RULES[32 /* ExclamationPoint */] = EXCLAMATION_POINT_RULE;
RULES[33 /* Equals */] = EQUALS_SIGN_RULE;
RULES[34 /* Percent */] = PERCENT_SIGN_RULE;
RULES[35 /* FullError */] = FULL_ERROR_RULE;
RULES[36 /* EndOfString */] = END_OF_STRING_RULE;
